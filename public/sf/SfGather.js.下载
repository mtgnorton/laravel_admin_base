/**
 * this-js SDK
 * @name this
 * @author 854638,01368384
 * 限制说明：支持ie9及以上
 */
function Gather(obj) {
    // 'use strict';//ie10以下会导致createTimeoutFunc异常

    var SDK_VERSION = "1.0.14";
    var SDK_NAME = "SfGather-js";
    //存储key
    var REQUEST_PAGE_QUEUE = "sf_gather_queue_page";
    var REQUEST_QUEUE = "sf_gather_queue";
    var EVENT_QUEUE = "sf_gather_event";
    var DEVICE_ID = "sf_gather_id";

    var sessionStarted = false,
        debug = false,
        apiPath = "",
        beatInterval = 500,
        queueSize = 1000,
        requestQueue = [],
        requestForPageQueue = [],//仅提供给页面跳转前数据的存储
        eventQueue = [],
        crashLogs = [],
        timedEvents = {},
        ignoreReferrers = [],
        crashSegments = null,
        autoExtend = true,
        lastBeat,
        storedDuration = 0,
        lastView = null,
        lastViewTime = 0,
        lastViewStoredDuration = 0,
        failTimeout = 0,
        failTimeoutAmount = 60,
        inactivityTime = 20,
        inactivityCounter = 0,
        sessionUpdate = 60,
        maxEventBatch = 10,
        lastMsTs = 0,
        readyToProcess = true,
        urlParseRE = /^(((([^:\/#\?]+:)?(?:(\/\/)((?:(([^:@\/#\?]+)(?:\:([^:@\/#\?]+))?)@)?(([^:\/#\?\]\[]+|\[[^\/\]@#?]+\])(?:\:([0-9]+))?))?)?)?((\/?(?:[^\/\?#]+\/+)*)([^\?#]*)))?(\?[^#]+)?)(#.*)?/,
        searchBotRE = /(SfGatherSiteBot|nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask Jeeves\/Teoma|ia_archiver|bingbot|Google Web Preview|Mediapartners-Google|AdsBot-Google|Baiduspider|Ezooms|YahooSeeker|AltaVista|AVSearch|Mercator|Scooter|InfoSeek|Ultraseek|Lycos|Wget|YandexBot|Yandex|YaDirectFetcher|SiteBot|Exabot|AhrefsBot|MJ12bot|TurnitinBot|magpie-crawler|Nutch Crawler|CMS Crawler|rogerbot|Domnutch|ssearch_bot|XoviBot|netseer|digincore|fr-crawler|wesee|AliasIO)/,
        trackTime = true,
        startTime,
        baseSitUrl = 'http://218.17.248.243:40021/json_data',
        key_prefix = "";

    this.q = [];
    this.onload = [];
    this.app_id = "";
    this.device_id = getId();
    this.url = baseSitUrl;
    this.platform = "mobile";
    this.app_version = "0.0";
    this.uid = "";
    this.sec_uid = "";
    this.login_type = "";
    this.ignore_visitor = false;
    this.ignore_report = false;
    this.force_post = false;
    this.auto = true;
    this.auto_error = true;
    this.auto_pv = true;
    this.auto_sftag = true;
    this.canParentAutoPop = false;
    this.parentAutoPopLevel = 6;
    this.passed_data = {};

    if (obj) {
        this.q = obj.q || [];
        debug = obj.debug || false;
        this.url = obj.url || "";
        this.app_id = obj.app_id || "";
        this.app_version = obj.app_version || "";
        this.storeKey = obj.storeKey || "";
    }

    /**
     * 初始化SfGather对象
     * @param {Object} ob - 初始化参数对象
     * @param {string} ob.app_id - 点击流后台分配的appId,必传字段
     * @param {string} ob.device_id - 设备id，作为用户唯一标识，如果为空，则SDK自动生成
     * @param {string} ob.url - 要上报到的后台url,必传字段
     * @param {string} [ob.platform='pc'] - 平台类型,默认pc
     * @param {string} [ob.app_version=0.0] - 应用自身的版本,默认0.0
     * @param {string=} ob.uid - 用户uid
     * @param {string=} ob.sec_uid - 用户三方登录uid
     * @param {string=} ob.login_type - 用户登录类型
     * @param {boolean} [ob.debug=false] - 是否开启debug模式,默认false
     * @param {boolean} [ob.ignore_visitor=false] - 是否关闭数据记录功能，默认false
     * @param {boolean} [ob.ignore_report=false] - 是否关闭数据上报功能，默认false
     * @param {number} [ob.interval=500] - 一次心跳间隔时长,默认500ms
     * @param {number} [ob.queue_size=1000] - 请求队列缓存的最大容量,默认1000
     * @param {number} [ob.max_events=10] - 一次心跳上传的事件最大数量,默认10
     * @param {boolean} [ob.force_post=false] - 强制使用post方式上报数据
     * @param {string} [ob.storeKey=""] - 自定义storeKey参数用于计算
     * @param {string} [ob.canParentAutoPop=false] - 是否允许设置了sftag属性的点击事件的冒泡捕获
     * @param {number} [ob.fail_timeout=60] - 网络超时时长,默认60s
     * @param {number} [ob.inactivity_time=20] - 用户无响应时间间隔,默认20m
     * @param {number} [ob.session_update=60] - 会话更新时间,默认60s
     * @param {array=} ob.ignore_referrers - 过滤的referrers数组
     *
     */
    this.init = function (ob) {
        startTime = getTimestamp();
        timedEvents = {};
        ob = ob || this;

        beatInterval = ob.interval || beatInterval;
        queueSize = ob.queue_size || queueSize;
        failTimeoutAmount = ob.fail_timeout || failTimeoutAmount;
        inactivityTime = ob.inactivity_time || inactivityTime;
        sessionUpdate = ob.session_update || sessionUpdate;
        maxEventBatch = ob.max_events || maxEventBatch;

        this.app_id = ob.app_id || this.app_id;
        this.device_id = ob.device_id || this.device_id;
        this.url = stripTrailingSlash(ob.url || this.url);
        this.platform = ob.platform || this.platform;
        this.app_version = ob.app_version || this.app_version;
        this.uid = ob.uid || this.uid;
        this.sec_uid = ob.sec_uid || this.sec_uid;
        this.login_type = ob.login_type || this.login_type;
        debug = getValue(ob, "debug", debug);
        this.ignore_visitor = getValue(ob, "ignore_visitor", this.ignore_visitor);
        this.ignore_report = getValue(ob, "ignore_report", this.ignore_report);
        this.force_post = getValue(ob, "force_post", this.force_post);
        this.auto = getValue(ob, "auto", this.auto);
        this.auto_pv = getValue(ob, "auto_pv", this.auto_pv);
        this.auto_sftag = getValue(ob, "auto_sftag", this.auto_sftag);
        this.auto_error = getValue(ob, "auto_error", this.auto_error);
        this.canParentAutoPop = getValue(ob, "canParentAutoPop", this.canParentAutoPop);
        this.parentAutoPopLevel = getValue(ob, "parentAutoPopLevel", this.parentAutoPopLevel);
        this.q = ob.q || this.q;
        this.onload = ob.onload || this.onload;

        if (ob.ignore_referrers && ob.ignore_referrers.constructor === Array) {
            ignoreReferrers = ob.ignore_referrers;
        }

        key_prefix = this.initParams(ob.storeKey || this.storeKey || window.location.pathname);
        clearEmptyCache();

        eventQueue = store(EVENT_QUEUE) || [];
        requestQueue = store(REQUEST_QUEUE) || [];

        transQueueData();

        if (this.url === "") {
            log("Please provide server URL");
            this.ignore_visitor = true;
        }

        if (window.name && window.name.indexOf("sf_gather:") === 0) {
            this.passed_data = JSON.parse(window.name.replace("sf_gather:", ""));
        }
        else if (location.hash && location.hash.indexOf("#sf_gather:") === 0) {
            this.passed_data = JSON.parse(location.hash.replace("#sf_gather:", ""));
        }

        if (this.passed_data) {
            if (this.passed_data.token && this.passed_data.purpose) {
                if (this.passed_data.token != store("sf_gather_old_token")) {
                    setToken(this.passed_data.token);
                    store("sf_gather_old_token", this.passed_data.token);
                }
                if (this.passed_data.purpose === "heatmap") {
                    this.ignore_visitor = true;
                    showLoader();
                    loadJS(this.url + "/views/heatmap.js", hideLoader);
                }
            }
        }

        if (this.auto) {//是否开启自动监听
            this.initAction();
        }

        if (console !== "undefined") {
            console.log("Gather initialized");
        }

        //let code waiting for us to load, know that we have loaded
        if (this.onload.constructor !== Array)
            this.onload = [];

        if (this.q.constructor !== Array)
            this.q = [];
        this.heartBeat();
        localStore(DEVICE_ID, this.device_id);
        if (location.search) {
            var parts = location.search.substring(1).split('&');

            for (var i = 0; i < parts.length; i++) {
                var nv = parts[i].split('=');
                if (nv[0] == DEVICE_ID)
                    localStore("sf_gather_cmp_id", nv[1]);
                else if (nv[0] == "sf_gather_uid")
                    localStore("sf_gather_cmp_uid", nv[1]);
            }
        }
    };

    function getValue(obj, key, defaultValue) {
        if (obj.hasOwnProperty(key)) {
            return obj[key];
        }
        return defaultValue;
    }

    /**
     * 初始化内部参数
     */
    this.initParams = function (path) {
        //在同一域名下，根据path生产不一样的存储key
        //app_id用于防止不同android app内嵌html导致的重复
        var tempKey = path + "/" + this.app_id;
        if (!debug) {//近似处理
            var count = 0;
            var slash = 0;
            var charCode = 0;
            for (var i = 0; i < tempKey.length; i++) {
                charCode = tempKey.charCodeAt(i);
                count += charCode;
                charCode == 47 ? slash++ : 0;//记录/数量
            }
            tempKey = count.toString(16) + "_" + slash;
        }
        log("顺丰大数据:" + tempKey);
        return tempKey;
    }

    /**
     * @author fanxing
     * 将页面跳转前的记录转移到requestQueue
     */
    function transQueueData() {
        var pageQueue = store(REQUEST_PAGE_QUEUE) || [];
        if (pageQueue.length && pageQueue.length > 0) {
            for (var i = 0; i < pageQueue.length; i++) {
                requestQueue.push(pageQueue[i]);
            }
            store(REQUEST_QUEUE, requestQueue);
            store(REQUEST_PAGE_QUEUE, requestForPageQueue);
            pageQueue = null;
        }
    }

    /**
     * 需要初始化调用的方法
     */
    this.initAction = function () {
        var self = this;
        // 监听所有的点击事件
        if (this.auto_sftag) {
            addEventHandler(document, "click", function (ev) {
                self.globalClickEventHandler(ev);
            });
        }
        //初始化页面pv监听
        if (this.auto_pv) {
            addEventHandler(window, "load", function () {
                self.onPageView();
            });
            addEventHandler(window, "hashchange", function () {
                self.onPageView();
            });
        }
        //页面卸载前收尾处理,会导致数据重复
        // addEventHandler(window, "beforeunload", heartBeat);
        //初始化异常监听,如果外部覆盖了，则不会回调需要手动记录异常日志
        if (this.auto_error) {
            window.onerror = function () {
                self.onError(arguments)
            };
        }
    };

    /**
     * 心跳方法
     * 每间隔beatInterval时长心跳一次,每次心跳最多上报数量为maxEventBatch的event
     */
    this.heartBeat = function () {
        var self = this;
        if (!this.ignore_report) {
            //notify load waiters
            var i = 0;
            if (typeof this.onload !== "undefined" && this.onload.length > 0) {
                for (i = 0; i < this.onload.length; i++) {
                    if (typeof this.onload[i] === "function")
                        this.onload[i]();
                }
                this.onload = [];
            }
            //process queue
            if (typeof this.q !== "undefined" && this.q.length > 0) {
                var req;
                var q = this.q;
                this.q = [];
                for (i = 0; i < q.length; i++) {
                    req = q[i];
                    log("Processing queued call", req);
                    if (typeof this[req] === "function") {
                        this[req]();
                    }
                    else if (req.constructor === Array && req.length > 0) {
                        if (typeof this[req[0]] !== "undefined")
                            this[req[0]].apply(this, req.slice(1));
                    }
                }
            }

            //extend session if needed
            if (sessionStarted && autoExtend && trackTime) {
                var last = getTimestamp();
                if (last - lastBeat > sessionUpdate) {
                    this.session_duration(last - lastBeat);
                    lastBeat = last;
                }
            }

            //process event queue
            if (eventQueue.length > 0 && !this.ignore_visitor) {
                if (eventQueue.length === 1) {//只有一条
                    eventQueue.forEach(function (request) {
                        self.toRequestQueue(request);
                    });
                    eventQueue = [];
                } else {//单条转批量
                    var events = eventQueue.splice(0, maxEventBatch);
                    var request = {};
                    request.event_id = "batch";
                    request.type = "batch";
                    request.properties = [];
                    events.forEach(function (event) {
                        if (!event.type) {
                            event.type = "event";
                        }
                        request.properties.push(event);
                    });
                    this.toRequestQueue(request);
                }

                store(EVENT_QUEUE, eventQueue);
            }

            //process request queue with event queue
            if (requestQueue.length > 0 && readyToProcess && getTimestamp() > failTimeout) {
                readyToProcess = false;
                var params = requestQueue.shift();
                log("Processing request", params);
                this.sendXmlHttpRequest(params, function (err, params) {
                    log("Request Finished", params, err);
                    if (err) {
                        requestQueue.unshift(params);
                        failTimeout = getTimestamp() + failTimeoutAmount;
                    }
                    store(REQUEST_QUEUE, requestQueue, true);
                    readyToProcess = true;
                });
            }
        }

        setTimeout(function () {
            self.heartBeat()
        }, beatInterval);
    }

    /**
     * @author fanxing
     * 同步构建数据，异步发送网络请求
     * 直接发送数据到后台
     * eventParams：json格式，事件参数
     * callback：function,要执行的回调函数
     * timeout: 毫秒, 超时时间
     */
    this.sendDataDirect = function (callback, eventParams, timeout) {
        //ignore bots
        if (this.ignore_visitor || !callback || typeof callback !== 'function')
            return;
        if (!this.device_id) {
            log("device_id is missing");
            return;
        }
        if (!this.url) {
            log("url is missing");
            return;
        }

        if (eventParams) {//如果有事件参数，则发起网络请求
            var buildEvent = this.buildEvent(eventParams);
            if (buildEvent) {
                var pageQueue = this.buildRequest(buildEvent);
                requestForPageQueue.push(pageQueue);
                store(REQUEST_PAGE_QUEUE, requestForPageQueue);

                this.sendXmlHttpRequest(pageQueue, this.createTimeoutFunc(callback, timeout));
            }
        } else {//否则设置超时执行回调
            this.createTimeoutFunc(callback, timeout);
        }
    };

    this.createTimeoutFunc = function (callback, timeout) {
        if (callback) {
            var called = false;

            // noinspection JSAnnotator
            var self = this;
            function fun() {
                if (arguments.length == 0) {//无参表示来自定时器
                    log("超时回调");
                } else {
                    log("请求回调参数：" + JSON.stringify(arguments));
                    if (!arguments[0]) {//无异常，删除本地存储
                        requestForPageQueue.shift(arguments[1]);
                        store(REQUEST_PAGE_QUEUE, requestForPageQueue);
                    }
                }
                if (!called) {//只回调一次
                    called = true;
                    callback(arguments);
                }
            }

            timeout = isNaN(timeout) ? 1000 : timeout;
            setTimeout(fun, timeout);

            return fun;
        }
    }

    /**
     * 全局click事件处理器
     * @param ev
     */
    this.globalClickEventHandler = function (ev) {
        var target = get_event_target(ev);

        var event = makeEventFromSfTag(target);
        if (event) {//有效标签 加入队列，异步调度
            this.q.push(['add_event', event]);
        }
        if (this.canParentAutoPop) {//允许父节点自动识别
            var level = 0
            while (target.parentElement) {
                target = target.parentElement;
                level++;
                if (this.parentAutoPopLevel > 0 && level > this.parentAutoPopLevel) {
                    break;
                }
                event = makeEventFromSfTag(target);
                if (event) {//有效标签 加入队列，异步调度
                    this.q.push(['add_event', event]);
                }
            }
        }
    };

    /**
     * 从sftag中构造事件数据
     * @param sftag "key1:value1,key2:value2...."
     */
    function makeEventFromSfTag(target) {
        // 取得自定义标签
        var sftag = target.getAttribute("sftag");

        if (!sftag) {
            return null;
        }
        // 分割标签
        var tags = sftag.split(",");
        if (tags.length === 0) {
            return null;
        }

        var event = {
            event_id: 'click_auto',
            tagName: target.tagName.toLowerCase()
        };
        //获取标签属性
        var attrs = ["id", "class"];
        for (var i = 0; i < attrs.length; i++) {
            var tempAttr = target.getAttribute(attrs[i]);
            if (!!tempAttr) {
                event[attrs[i]] = target.getAttribute(attrs[i]);
            }
        }

        for (var i = 0; i < tags.length; i++) {
            var tag = tags[i];
            var temp = tag.split(":");
            if (temp.length !== 2) {
                continue;
            }
            var key = temp[0].trim();
            var value = temp[1].trim();

            if (key === "event_id") {
                if (!!value && value !== "null") {//value非空并且不等于字符串"null"
                    event.event_id = value;
                }
            } else {
                event[key] = value;
            }
        }
        return event;
    }

    /**
     * 添加事件处理器
     * @param element 元素
     * @param type 事件类型
     * @param handler 事件处理器
     */
    function addEventHandler(element, type, handler) {
        if (element.addEventListener) {
            element.addEventListener(type, handler, true);
        } else if (element.attachEvent) {//兼容IE8-
            element.attachEvent("on" + type, handler);
        } else {
            element["on" + type] = handler;
        }
    }

    /**
     * 移除事件处理器
     * @param element 元素
     * @param type 事件类型
     * @param handler 事件处理器
     */
    function removeEventHandler(element, type, handler) {
        if (element.removeEventListener) {
            element.removeEventListener(type, handler, true);
        } else if (element.detachEvent) {//兼容IE8-
            element.detachEvent("on" + type, handler);
        } else {
            element["on" + type] = null;
        }
    }

    /**
     * @author fanxing(代码重构的)
     * 追加额外数据到请求参数中
     * @param request
     */
    this.buildRequest = function (request) {
        request.app_id = this.app_id;
        request.app_v = this.app_version;
        request.platform = this.platform;
        request.device_id = this.device_id;
        request.cookie_id = readCookieByName('JSESSIONID') || '';
        request.sdk = 'js';
        request.sdk_name = SDK_NAME;
        request.sdk_v = SDK_VERSION;
        request.s_w = getScreenWidth();
        request.s_h = getScreenHeight();
        request.model = getModel();
        request.os = getOS();
        request.os_v = getOSVersion();

        var browserInfo = getBrowserInfo();
        request.browser = browserInfo.appname;
        request.browser_v = browserInfo.version;
        if (!request.event_id) {//没有设置时，给默认值
            request.event_id = 'view_default';
        }
        if (!request.type) {
            request.type = 'event';
        }
        if (!request.time) {
            request.time = getMsTimestamp();//事件时间应为不唯一的毫秒值
        }

        return request;
    }

    /**
     * 拼装请求队列
     * @param request
     */
    this.toRequestQueue = function (request) {
        //ignore bots
        if (this.ignore_visitor)
            return;
        if (!this.device_id) {
            log("device_id is missing");
            return;
        }
        if (!this.url) {
            log("url is missing");
            return;
        }
        this.buildRequest(request);

        if (requestQueue.length > queueSize)
            requestQueue.shift();

        requestQueue.push(request);
        store(REQUEST_QUEUE, requestQueue, true);
    }

    /**
     * 开始会话session
     * @param {boolean} noHeartBeat - 为true时不使用心跳管理session
     */
    this.begin_session = function (noHeartBeat) {
        if (!sessionStarted) {
            log("Session started");
            lastBeat = getTimestamp();
            sessionStarted = true;
            autoExtend = (noHeartBeat) ? false : true;
            var req = {};
            req.begin_session = 1;
            // req.metrics = JSON.stringify(getMetrics());
            req.event_id = "session";

            this.add_event(req);
        }
    };

    /**
     * 设置用户登录相关信息
     * @param uid 用户uid
     * @param sec_uid 三方登录id
     * @param login_type 登录类型
     */
    this.set_login_info = function (uid, sec_uid, login_type) {
        if (uid)
            this.uid = uid;

        if (sec_uid)
            this.sec_uid = sec_uid;

        if (login_type)
            this.login_type = login_type;
    };

    /**
     * Report session duration
     * @param {int} sec - amount of seconds to report for current session
     */
    this.session_duration = function (sec) {
        if (sessionStarted) {
            log("Session extended", sec);
            this.add_event({session_duration: sec, event_id: "session_duration"});
        }
    };

    /**
     * End current session
     * @param {int} sec - amount of seconds to report for current session, before ending it
     */
    this.end_session = function (sec) {
        if (sessionStarted) {
            sec = sec || getTimestamp() - lastBeat;
            log("Ending session");
            this.reportViewDuration();
            sessionStarted = false;
            this.add_event({event_id: "session", end_session: 1, session_duration: sec});
        }
    };

    /**
     * Change current user/device id
     * @param {string} newId - new user/device ID to use
     * @param {boolean} merge - move data from old ID to new ID on server
     **/
    this.change_id = function (newId, merge) {
        if (this.device_id != newId) {
            if (!merge) {
                //end current session
                this.end_session();
                //clear timed events
                timedEvents = {};
            }
            var oldId = this.device_id;
            this.device_id = newId;
            localStore(DEVICE_ID, this.device_id);
            log("Changing id");
            if (merge)
                this.toRequestQueue({old_device_id: oldId});
            else
            //start new session for new id
                this.begin_session(!autoExtend);
        }
    };

    /**
     * 上报通用事件
     * @param {Object} event - 事件对象
     * @param {string} event.event_id - 事件类型id,默认为view_page
     **/
    this.add_event = function (event) {
        var buildEvent = this.buildEvent(event);
        if (buildEvent) {
            eventQueue.push(buildEvent);
            store(EVENT_QUEUE, eventQueue);
        }
    };

    /**
     * @author fanxing(代码重构的)
     * 根据外部参数，冲沟事件记录
     * @param event
     * @returns {{}}
     */
    this.buildEvent = function (event) {
        if (this.ignore_visitor) {
            return;
        }
        var pros = {};
        pros.time = getMsTimestamp();//事件时间应为不唯一的毫秒值
        if (event.page_url) {
            pros.page_url = event.page_url;
            delete event.page_url;
        } else {
            pros.page_url = location.href;
        }

        if (event.page_ref) {
            pros.page_ref = event.page_ref;
            delete event.page_ref;
        } else {
            pros.page_ref = document.referrer;
        }

        if (event.page_name) {
            pros.page_name = event.page_name;
            delete event.page_name;
        } else {
            if (document.getElementsByTagName('title')[0]) {
                pros.page_name = document.getElementsByTagName('title')[0].innerHTML;
            }
        }

        if (event.event_id) {
            pros.event_id = event.event_id;
            delete event.event_id;
            pros.properties = event;
        } else {
            pros.event_id = 'view_default';
            pros.properties = event;
        }

        if (this.uid)
            pros.uid = this.uid;

        if (this.sec_uid)
            pros.sec_uid = this.sec_uid;

        if (this.login_type)
            pros.login_type = this.login_type;

        return pros;
    }

    /**
     * Start timed event, which will fill in duration property upon ending automatically
     * @param {string} key - event name that will be used as key property
     **/
    this.start_event = function (key) {
        if (timedEvents[key]) {
            log("Timed event with key " + key + " already started");
            return;
        }
        timedEvents[key] = getTimestamp();
    };

    /**
     * End timed event
     * @param {string|object} event - event key if string or this event same as passed to {@link this.add_event}
     **/
    this.end_event = function (event) {
        if (typeof event == "string") {
            event = {key: event};
        }
        // if (!event.key) {
        //     log("Event must have key property");
        //     return;
        // }
        // if (!timedEvents[event.key]) {
        //     log("Timed event with key " + event.key + " was not started");
        //     return;
        // }
        event.dur = getTimestamp() - timedEvents[event.key];
        this.add_event(event);
        delete timedEvents[event.key];
    };

    /**
     * Provide information about user
     * @param {Object} user - this {@link UserDetails} object
     * @param {string=} user.name - user's full name
     * @param {string=} user.username - user's username or nickname
     * @param {string=} user.email - user's email address
     * @param {string=} user.organization - user's organization or company
     * @param {string=} user.phone - user's phone number
     * @param {string=} user.picture - url to user's picture
     * @param {string=} user.gender - M value for male and F value for femail
     * @param {number=} user.byear - user's birth year used to calculate current age
     * @param {Object=} user.custom - object with custom key value properties you want to save with user
     **/
    this.user_details = function (user) {
        log("Adding userdetails: ", user);
        var props = ["name", "username", "email", "organization", "phone", "picture", "gender", "byear", "custom"];
        this.toRequestQueue({user_details: JSON.stringify(getProperties(user, props))});
    };

    /**
     * 自动异常监听
     **/
    this.onError = function (args) {
        var msg, url, line;
        if (args.length > 0) {
            msg = args[0];
        }
        if (args.length > 1) {
            url = args[1];
        }
        if (args.length > 2) {
            line = args[2];
        }
        var error = "";
        if (typeof msg !== "undefined")
            error = error + msg + "\n";
        if (typeof url !== "undefined")
            error += "at " + url;
        if (typeof line !== "undefined")
            error += ":" + line;
        error += "\n";

        try {
            var stack = [];
            var callee = args.callee;
            var f = callee.caller; // jshint ignore:line
            while (f) {
                stack.push(f.name);
                f = f.caller;
            }
            error += stack.join("\n");
        } catch (ex) {
        }
        this.recordError({stack: error, event_id: "error_auto"}, false);
    }

    /**
     * 手动添加异常事件
     * Log an exception that you catched through try and catch block and handled yourself and just want to report it to server
     * @param {Object} err - error exception object provided in catch block
     * @param {string=} segments - additional key value pairs you want to provide with error report, like versions of libraries used, etc.
     **/
    this.track_errors = function (err, segments) {
        this.recordError(err, true, segments);
    };

    /**
     * 添加额外的异常行日志信息
     * Add new line in the log of breadcrumbs of what user did, will be included together with error report
     * @param {string} record - any text describing what user did
     **/
    this.add_log = function (record) {
        crashLogs.push(record);
    };

    /**
     * Stop tracking duration time for this user
     **/
    this.stop_time = function () {
        if (trackTime) {
            trackTime = false;
            storedDuration = getTimestamp() - lastBeat;
            lastViewStoredDuration = getTimestamp() - lastViewTime;
        }
    };

    /**
     * Start tracking duration time for this user, by default it is automatically tracked if you are using internal session handling
     **/
    this.start_time = function () {
        if (!trackTime) {
            trackTime = true;
            lastBeat = getTimestamp() - storedDuration;
            lastViewTime = getTimestamp() - lastViewStoredDuration;
            lastViewStoredDuration = 0;
        }
    };

    /**
     * 手动跟踪用户session，记录用户在页面停留时间
     **/
    this.track_sessions = function () {
        //start session
        this.begin_session();
        this.start_time();

        //end session on unload
        var self = this;
        addEventHandler(window, "beforeunload", function () {
            self.end_session();
        });
        addEventHandler(window, "unload", function () {
            self.end_session();
        });

        //manage sessions on window visibility events
        var hidden = "hidden";

        function onchange() {
            if (document[hidden]) {
                self.stop_time();
            } else {
                self.start_time();
            }
        }

        //Page Visibility API
        if (hidden in document)
            document.addEventListener("visibilitychange", onchange);
        else if ((hidden = "mozHidden") in document)
            document.addEventListener("mozvisibilitychange", onchange);
        else if ((hidden = "webkitHidden") in document)
            document.addEventListener("webkitvisibilitychange", onchange);
        else if ((hidden = "msHidden") in document)
            document.addEventListener("msvisibilitychange", onchange);
        // IE 9 and lower:
        else if ("onfocusin" in document) {
            addEventHandler(window, "focusin", function () {
                self.start_time();
            });
            addEventHandler(window, "focusout", function () {
                self.stop_time();
            });
        }
        // All others:
        else {
            //old way
            addEventHandler(window, "focus", function () {
                self.start_time();
            });
            addEventHandler(window, "blur", function () {
                self.stop_time();
            });

            //newer mobile compatible way
            addEventHandler(window, "pageshow", function () {
                self.start_time();
            });
            addEventHandler(window, "pagehide", function () {
                self.stop_time();
            });
        }

        function resetInactivity() {
            if (inactivityCounter >= inactivityTime) {
                self.start_time();
            }
            inactivityCounter = 0;
        }

        addEventHandler(window, "mousemove", resetInactivity);
        addEventHandler(window, "click", resetInactivity);
        addEventHandler(window, "keydown", resetInactivity);
        addEventHandler(window, "scroll", resetInactivity);

        //track user inactivity
        setInterval(function () {
            inactivityCounter++;
            if (inactivityCounter >= inactivityTime) {
                self.stop_time();
            }
        }, 60000);
    };

    /**
     * 手动记录用户访问的页面
     * @param {string=} page - optional name of the page, by default uses current url path
     * @param {array=} ignoreList - optional array of strings or regexes to test for the url/view name to ignore and not report
     **/
    this.track_pageview = function (page, ignoreList) {
        this.reportViewDuration();
        //we got ignoreList first
        if (page && page.constructor === Array) {
            ignoreList = page;
            page = null;
        }
        page = page || window.location.pathname;
        if (ignoreList && ignoreList.length) {
            for (var i = 0; i < ignoreList.length; i++) {
                try {
                    var reg = new RegExp(ignoreList[i]);
                    if (reg.test(page)) {
                        log("Ignored:", page);
                        return;
                    }
                } catch (ex) {
                }
            }
        }
        lastView = page;
        lastViewTime = getTimestamp();
        var segments = {
            "name": page,
            "visit": 1,
            "domain": window.location.hostname
        };

        if (typeof document.referrer !== "undefined" && document.referrer.length) {
            var matches = urlParseRE.exec(document.referrer);
            //do not report referrers of current website
            if (matches && matches[11] && matches[11] != window.location.hostname)
                segments.start = 1;
        }
        segments.event_id = "view_page";

        //track pageview
        this.add_event(segments);
    };

    /**
     * @author fanxing
     * 自动记录页面浏览pv
     * 需要页面初始化 window.gatherConfig._st = new Date() 才能收集页面加载时间
     */
    this.onPageView = function () {
        var segments = {
            event_id: 'view_page_auto'
        };
        //页面加载时间
        window.gatherConfig && window.gatherConfig._st && window.gatherConfig._st instanceof Date
        && (segments.load_time = new Date().getTime() - window.gatherConfig._st.getTime());

        this.add_event(segments);
    }

    this.moniter_autoPV = this.onPageView;

    /**
     * 收集页面上所有点击事件
     * @param {Object=} parent - 收集点击事件的节点,不传时默认为document
     * @param {Object=} props - 自定义字段
     **/
    this.track_clicks = function (parent, props) {
        parent = parent || document;
        var shouldProcess = true;
        var self = this;
        function processClick(event) {
            if (shouldProcess) {
                shouldProcess = false;

                //cross browser click coordinates
                get_page_coord(event);
                if (typeof event.pageX !== "undefined" && typeof event.pageY !== "undefined") {
                    var height = getDocHeight();
                    var width = getDocWidth();
                    var defaultEvent = {
                        "type": "click",
                        "x": event.pageX,
                        "y": event.pageY,
                        "width": width,
                        "height": height,
                        "domain": window.location.hostname
                    };
                    var props_click;
                    if (props) {
                        props_click = Object.assign(props, defaultEvent);
                    } else {
                        props_click = defaultEvent;
                    }
                    props_click.event_id = 'click';
                    //record click event
                    self.add_event(props_click);
                }
                setTimeout(function () {
                    shouldProcess = true;
                }, 1000);
            }
        }

        //add any events you want
        addEventHandler(parent, "click", processClick);
    };

    /**
     * 收集点击links事件
     * @param {Object=} parent - 收集点击links事件的节点,不传时默认为document
     **/
    this.track_links = function (parent) {
        parent = parent || document;

        function processClick(event) {

            //get element which was clicked
            var elem = get_event_target(event).closest('a');

            if (elem) {
                //cross browser click coordinates
                get_page_coord(event);

                //record click event
                this.add_event({
                    event_id: "click_link",
                    "href": elem.href,
                    "text": elem.innerText,
                    "id": elem.id,
                    "x": event.pageX,
                    "y": event.pageY

                });
                //anticipate page unload
                if (typeof elem.href !== "undefined" && elem.target !== '_blank' && !(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey)) {
                    var link = elem.href.replace(window.location.href.split("#")[0], "");
                    if (link.indexOf("#") !== 0) {
                        //most probably user will leave the page

                        //end this session
                        this.end_session();
                    }
                }
            }
        }

        //add any events you want
        addEventHandler(parent, "click", processClick);
    };

    /**
     * 收集页面所有表单数据
     * @param {Object=} parent - 待收集表单的父节点对象,默认为document
     **/
    this.track_forms = function (parent) {
        parent = parent || document;

        function getInputName(input) {
            return input.name || input.id || input.type || input.nodeName;
        }

        var self = this;
        function processForm(event) {
            var form = get_event_target(event);
            var segmentation = {
                "id": form.id,
                "name": form.name,
                "action": form.action,
                "method": form.method
            };

            //get input values
            var input;
            if (typeof form.elements !== "undefined")
                for (var i = 0; i < form.elements.length; i++) {
                    input = form.elements[i];
                    if (input && input.type != "password") {
                        if (typeof segmentation["input:" + getInputName(input)] === "undefined")
                            segmentation["input:" + getInputName(input)] = [];
                        if (input.nodeName.toLowerCase() == "select") {
                            if (typeof input.multiple !== "undefined") {
                                var values = [];
                                if (typeof input.options !== "undefined")
                                    for (var j = 0; j < input.options.length; j++) {
                                        if (input.options[j].selected)
                                            values.push(input.options[j].value);
                                    }
                                segmentation["input:" + getInputName(input)].push(values.join(", "));
                            }
                            else
                                segmentation["input:" + getInputName(input)].push(input.options[input.selectedIndex].value);
                        }
                        else if (input.nodeName.toLowerCase() == "input") {
                            if (typeof input.type !== "undefined") {
                                if (input.type.toLowerCase() == "checkbox" || input.type.toLowerCase() == "radio") {
                                    if (input.checked) {
                                        segmentation["input:" + getInputName(input)].push(input.value);
                                    }
                                }
                                else {
                                    segmentation["input:" + getInputName(input)].push(input.value);
                                }
                            }
                            else
                                segmentation["input:" + getInputName(input)].push(input.value);
                        }
                        else if (input.nodeName.toLowerCase() == "textarea") {
                            segmentation["input:" + getInputName(input)].push(input.value);
                        }
                        else if (typeof input.value !== "undefined") {
                            segmentation["input:" + getInputName(input)].push(input.value);
                        }
                    }
                }
            for (var key in segmentation) {
                if (typeof segmentation[key].join != "undefined")
                    segmentation[key] = segmentation[key].join(", ");
            }
            segmentation.event_id = "formSubmit";
            //record submit event
            self.add_event(segmentation);

            //form will refresh page

            //end this session
            self.end_session();
        }

        //add any events you want
        addEventHandler(parent, "submit", processForm);
    };

    /**
     * 收集表单中的用户数据
     * @param {Object=} parent - DOM object which children to track, by default it is document body
     * @param {boolean} [useCustom=false] - submit collected data as custom user properties, by default collects as main user properties
     **/
    this.collect_from_forms = function (parent, useCustom) {
        parent = parent || document;
        var self = this;

        function processForm(event) {
            var form = get_event_target(event);
            var userdata = {};
            var hasUserInfo = false;

            //get input values
            var input;
            if (typeof form.elements !== "undefined") {
                //load labels for inputs
                var labelData = {};
                var labels = parent.getElementsByTagName('LABEL');
                var i, j;
                for (i = 0; i < labels.length; i++) {
                    if (labels[i].htmlFor && labels[i].htmlFor !== '') {
                        labelData[labels[i].htmlFor] = labels[i].innerText || labels[i].textContent || labels[i].innerHTML;
                    }
                }
                for (i = 0; i < form.elements.length; i++) {
                    input = form.elements[i];
                    if (input && input.type != "password") {
                        //check if element should be ignored
                        if (input.className.indexOf("sf_gather_user_ignore") == -1) {
                            var value = "";
                            //get value from input
                            if (input.nodeName.toLowerCase() == "select") {
                                if (typeof input.multiple !== "undefined") {
                                    var values = [];
                                    if (typeof input.options !== "undefined")
                                        for (j = 0; j < input.options.length; j++) {
                                            if (input.options[j].selected)
                                                values.push(input.options[j].value);
                                        }
                                    value = values.join(", ");
                                }
                                else
                                    value = input.options[input.selectedIndex].value;
                            }
                            else if (input.nodeName.toLowerCase() == "input") {
                                if (typeof input.type !== "undefined") {
                                    if (input.type.toLowerCase() == "checkbox" || input.type.toLowerCase() == "radio") {
                                        if (input.checked)
                                            value = input.value;
                                    }
                                    else {
                                        value = input.value;
                                    }
                                }
                                else
                                    value = input.value;
                            }
                            else if (input.nodeName.toLowerCase() == "textarea") {
                                value = input.value;
                            }
                            else if (typeof input.value !== "undefined") {
                                value = input.value;
                            }
                            //check if input was marked to be collected
                            if (input.className && input.className.indexOf("sf_gather_user_") != -1) {
                                var classes = input.className.split(" ");
                                for (j = 0; j < classes.length; j++) {
                                    if (classes[j].indexOf("sf_gather_user_") === 0) {
                                        userdata[classes[j].replace("sf_gather_user_", "")] = value;
                                        hasUserInfo = true;
                                        break;
                                    }
                                }
                            }
                            //check for email
                            else if ((input.type && input.type.toLowerCase() == "email") ||
                                (input.name && input.name.toLowerCase().indexOf("email") != -1) ||
                                (input.id && input.id.toLowerCase().indexOf("email") != -1) ||
                                (input.id && labelData[input.id] && labelData[input.id].toLowerCase().indexOf("email") != -1) ||
                                (/[^@\s]+@[^@\s]+\.[^@\s]+/).test(value)) {
                                if (!userdata.email) {
                                    userdata.email = value;
                                }
                                hasUserInfo = true;
                            }
                            else if ((input.name && input.name.toLowerCase().indexOf("username") != -1) ||
                                (input.id && input.id.toLowerCase().indexOf("username") != -1) ||
                                (input.id && labelData[input.id] && labelData[input.id].toLowerCase().indexOf("username") != -1)) {
                                if (!userdata.username) {
                                    userdata.username = value;
                                }
                                hasUserInfo = true;
                            }
                            else if ((input.name && (input.name.toLowerCase().indexOf("tel") != -1 || input.name.toLowerCase().indexOf("phone") != -1 || input.name.toLowerCase().indexOf("number") != -1)) ||
                                (input.id && (input.id.toLowerCase().indexOf("tel") != -1 || input.id.toLowerCase().indexOf("phone") != -1 || input.id.toLowerCase().indexOf("number") != -1)) ||
                                (input.id && labelData[input.id] && (labelData[input.id].toLowerCase().indexOf("tel") != -1 || labelData[input.id].toLowerCase().indexOf("phone") != -1 || labelData[input.id].toLowerCase().indexOf("number") != -1))) {
                                if (!userdata.phone) {
                                    userdata.phone = value;
                                }
                                hasUserInfo = true;
                            }
                            else if ((input.name && (input.name.toLowerCase().indexOf("org") != -1 || input.name.toLowerCase().indexOf("company") != -1)) ||
                                (input.id && (input.id.toLowerCase().indexOf("org") != -1 || input.id.toLowerCase().indexOf("company") != -1)) ||
                                (input.id && labelData[input.id] && (labelData[input.id].toLowerCase().indexOf("org") != -1 || labelData[input.id].toLowerCase().indexOf("company") != -1))) {
                                if (!userdata.organization) {
                                    userdata.organization = value;
                                }
                                hasUserInfo = true;
                            }
                            else if ((input.name && input.name.toLowerCase().indexOf("name") != -1) ||
                                (input.id && input.id.toLowerCase().indexOf("name") != -1) ||
                                (input.id && labelData[input.id] && labelData[input.id].toLowerCase().indexOf("name") != -1)) {
                                if (!userdata.name) {
                                    userdata.name = "";
                                }
                                userdata.name += value + " ";
                                hasUserInfo = true;
                            }
                        }
                    }
                }
            }

            //record user info, if any
            if (hasUserInfo) {
                log("Gathered user data", userdata);
                if (useCustom)
                    self.user_details({custom: userdata});
                else
                    self.user_details(userdata);
            }

            //form will refresh page

            //end this session
            self.end_session();
        }

        //add any events you want
        addEventHandler(parent, "submit", processForm);
    };

    /**
     *  PRIVATE METHODS
     **/
    this.reportViewDuration = function () {
        if (lastView) {
            var segments = {
                "event_id": "view_page_duration",
                "name": lastView,
                "segment": this.platform,
                "dur": getTimestamp() - lastViewTime
            };

            //track pageview
            this.add_event(segments);
            lastView = null;
        }
    }

    function getLastView() {
        return lastView;
    }

    function getId() {
        return localStore(DEVICE_ID) || generateUUID();
    }

    /**
     * 生成唯一UUID
     * @returns {string}
     */
    function generateUUID() {
        var d = new Date().getTime();
        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = (d + Math.random() * 16) % 16 | 0;
            d = Math.floor(d / 16);
            return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);
        });
        return uuid;
    }

    //get metrics of the browser
    this.getMetrics = function () {
        var metrics = {};

        //getting app version
        metrics._app_version = this.app_version;
        metrics._ua = navigator.userAgent;

        //getting resolution
        if (screen.width) {
            var width = (screen.width) ? parseInt(screen.width) : 0;
            var height = (screen.height) ? parseInt(screen.height) : 0;
            if (width !== 0 && height !== 0) {
                var iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);
                if (iOS && window.devicePixelRatio) {
                    //ios provides dips, need to multiply
                    width = Math.round(width * window.devicePixelRatio);
                    height = Math.round(height * window.devicePixelRatio);
                }
                else {
                    if (Math.abs(window.orientation) === 90) {
                        //we have landscape orientation
                        //switch values for all except ios
                        var temp = width;
                        width = height;
                        height = temp;
                    }
                }
                metrics._resolution = '' + width + "x" + height;
            }
        }

        //getting density ratio
        if (window.devicePixelRatio) {
            metrics._density = window.devicePixelRatio;
        }

        //getting locale
        var locale = navigator.language || navigator.browserLanguage || navigator.systemLanguage || navigator.userLanguage;
        if (typeof locale !== "undefined")
            metrics._locale = locale;

        if (typeof document.referrer !== "undefined" && document.referrer.length) {
            var matches = urlParseRE.exec(document.referrer);
            //do not report referrers of current website
            if (matches && matches[11] && matches[11] != window.location.hostname) {
                var ignoring = false;
                if (ignoreReferrers && ignoreReferrers.length) {
                    for (var k = 0; k < ignoreReferrers.length; k++) {
                        try {
                            var reg = new RegExp(ignoreReferrers[k]);
                            if (reg.test(document.referrer)) {
                                log("Ignored:", document.referrer);
                                ignoring = true;
                                break;
                            }
                        }
                        catch (ex) {
                        }
                    }
                }
                if (!ignoring)
                    metrics._store = document.referrer;
            }
        }

        log("Got metrics", metrics);
        return metrics;
    }

    /**
     * 获取屏幕宽度
     * @returns {number}
     */
    function getScreenWidth() {
        var ratio = window.devicePixelRatio || 1;
        var width = Math.round(screen.width * ratio);
        // 修正iPhone 6 plus误差
        if (width === 1242) {
            if (getOS() === 'ios') {
                width = 1080;
            }
        }
        // 修正Nexus X误差
        if (width === 1082) {
            width = 1080;
        }
        return width;
    }

    /**
     * 获取屏幕高度
     * @returns {number}
     */
    function getScreenHeight() {
        var ratio = window.devicePixelRatio || 1;
        var height = Math.round(screen.height * ratio);

        // 修正iPhone 6 plus误差
        if (height === 2208) {
            if (getOS() === 'ios') {
                height = 1920;
            }
        }
        // 修正Nexus X误差
        if (height === 1922) {
            height = 1920;
        }
        return height;
    }

    //log stuff
    log = function () {
        if (debug && typeof console !== "undefined") {
            if (arguments[1] && typeof arguments[1] == "object")
                arguments[1] = JSON.stringify(arguments[1]);
            console.log(Array.prototype.slice.call(arguments).join("\n"));
        }
    }

    /**
     * 获取当前时间戳秒值
     * @returns {number} 秒值
     */
    function getTimestamp() {
        return Math.floor(new Date().getTime() / 1000);
    }

    /**
     * 获取唯一的当前时间戳毫秒值
     * @returns {number} 毫秒值
     */
    function getMsTimestamp() {
        var ts = new Date().getTime();
        if (lastMsTs >= ts)
            lastMsTs++;
        else
            lastMsTs = ts;
        return lastMsTs;
    }

    this.recordError = function (err, nonfatal, segments) {
        if (err) {
            segments = segments || crashSegments;
            var error = "";
            if (typeof err === "object") {
                if (typeof err.stack !== "undefined")
                    error = err.stack;
                else {
                    if (typeof err.name !== "undefined")
                        error += err.name + ":";
                    if (typeof err.message !== "undefined")
                        error += err.message + "\n";
                    if (typeof err.fileName !== "undefined")
                        error += "in " + err.fileName + "\n";
                    if (typeof err.lineNumber !== "undefined")
                        error += "on " + err.lineNumber;
                    if (typeof err.columnNumber !== "undefined")
                        error += ":" + err.columnNumber;
                }
            } else {
                error = err + "";
            }
            nonfatal = (nonfatal) ? true : false;
            var metrics = this.getMetrics();
            var ob = {
                _resolution: metrics._resolution,
                _error: error,
                _app_version: metrics._app_version,
                _run: getTimestamp() - startTime
            };

            ob._not_os_specific = true;

            var battery = navigator.battery || navigator.webkitBattery || navigator.mozBattery || navigator.msBattery;
            if (battery)
                ob._bat = Math.floor(battery.level * 100);

            if (typeof navigator.onLine !== 'undefined')
                ob._online = (navigator.onLine) ? true : false;

            ob._background = (document.hasFocus()) ? false : true;

            if (crashLogs.length > 0)
                ob._logs = crashLogs.join("\n");
            crashLogs = [];
            ob._nonfatal = nonfatal;

            ob._view = (window.location.pathname || "") + (window.location.search || "") + (window.location.hash || "");

            if (typeof segments !== "undefined")
                ob._custom = segments;

            try {
                var canvas = document.createElement("canvas");
                var gl = canvas.getContext("experimental-webgl");
                ob._opengl = gl.getParameter(gl.VERSION);
            }
            catch (ex) {
            }

            var event_id = err.event_id ? err.event_id : "error";
            this.add_event({error_log: JSON.stringify(ob), event_id: event_id});
        }
    }

    //sending xml HTTP request
    this.sendXmlHttpRequest = function (params, callback) {
        try {
            log("Sending XML HTTP request");
            var xhr = window.XMLHttpRequest ? new window.XMLHttpRequest() : window.ActiveXObject ? new ActiveXObject('Microsoft.XMLHTTP') : null;
            var data = JSON.stringify(params);

            xhr.open('POST', this.url + apiPath, true);
            xhr.setRequestHeader("Content-type", "text/plain; charset=utf-8");

            // fallback on error
            xhr.onreadystatechange = function () {
                //服务器返回200 300 400系列状态值都认为请求成功或不可能成功，丢弃请求；500系列状态值则认为服务器出错，需重试请求
                if (this.readyState === 4 && this.status >= 200 && this.status < 500) {
                    if (typeof callback === 'function') {
                        callback(false, params);
                    }
                } else if (this.readyState === 4) {
                    log("Failed Server XML HTTP request", this.status);
                    if (typeof callback === 'function') {
                        callback(true, params);
                    }
                }
            };

            xhr.send(data);
        } catch (e) {
            // fallback
            log("Failed XML HTTP request", e);
            if (typeof callback === 'function') {
                callback(true, params);
            }
        }
    }

    //convert JSON object to query params
    function prepareParams(params) {
        var str = [];
        for (var i in params) {
            str.push(i + "=" + encodeURIComponent(params[i]));
        }
        return str.join("&");
    }

    //removing trailing slashes
    function stripTrailingSlash(str) {
        if (str.substr(str.length - 1) == '/') {
            return str.substr(0, str.length - 1);
        }
        return str;
    }

    //retrieve only specific properties from object
    function getProperties(orig, props) {
        var ob = {};
        var prop;
        for (var i = 0; i < props.length; i++) {
            prop = props[i];
            if (typeof orig[prop] !== "undefined")
                ob[prop] = orig[prop];
        }
        return ob;
    }

    //get closest parent matching nodeName
    if (!Element.prototype.closest) Element.prototype.closest = function (nodeName) {
        var el = this;
        nodeName = nodeName.toUpperCase();
        while (el) {
            if (el.nodeName.toUpperCase() == nodeName) {
                return el;
            }
            el = el.parentElement;
        }
    };

    //get element that fired event
    var get_event_target = function (event) {
        if (!event) {
            return window.event.srcElement;
        }
        else if (typeof event.target !== "undefined") {
            return event.target;
        }
        else {
            return event.srcElement;
        }
    };

    //get page coordinates
    function get_page_coord(e) {
        //checking if pageY and pageX is already available
        if (typeof e.pageY == 'undefined' &&
            typeof e.clientX == 'number' &&
            document.documentElement) {
            //if not, then add scrolling positions
            e.pageX = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
            e.pageY = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
        }
        //return e which now contains pageX and pageY attributes
        return e;
    }

    function getDocHeight() {
        var D = document;
        return Math.max(
            Math.max(D.body.scrollHeight, D.documentElement.scrollHeight),
            Math.max(D.body.offsetHeight, D.documentElement.offsetHeight),
            Math.max(D.body.clientHeight, D.documentElement.clientHeight)
        );
    }

    function getDocWidth() {
        var D = document;
        return Math.max(
            Math.max(D.body.scrollWidth, D.documentElement.scrollWidth),
            Math.max(D.body.offsetWidth, D.documentElement.offsetWidth),
            Math.max(D.body.clientWidth, D.documentElement.clientWidth)
        );
    }

    function setToken(token) {
        store("sf_gather_token", token);
    }

    function getToken() {
        var token = store("sf_gather_token");
        store("sf_gather_token", null);
        return token;
    }

    /**
     * 清理为空的cookie
     */
    function clearEmptyCookie() {
        var nameEQ = "=";
        var nameSplit = ";";
        var ca = document.cookie.split(nameSplit);
        var filterCa = "";
        for (var index = 0, max = ca.length; index < max; index++) {
            var c = ca[index];
            var map = c.split(nameEQ);
            if (map.length === 2) {
                var value = map[1];
                var key = map[0];
                if (key.search("sf_gather") > 0 && !(!value || value === "[]" || value === "")) {
                    filterCa += c + "; ";
                }
            }
        }
        document.cookie = filterCa
    }

    /**
     * 清理为空的localstorage
     */
    function clearEmptyStorage() {
        for (var i = 0; i < localStorage.length; i++) {
            var key = localStorage.key(i);
            if (key.search("sf_gather") > 0) {
                var value = localStorage.getItem(key);//以string形式返回
                if (!value || value === "[]" || value === "") {
                    localStorage.removeItem(key)
                }
            }
        }
    }

    /**
     * 清理缓存的空对象
     */
    function clearEmptyCache() {
        var lsSupport = false;
        // Check for native support
        if (typeof localStorage !== "undefined") {
            lsSupport = true;
            try {
                localStorage.setItem('testLocal', true);
            } catch (e) {
                lsSupport = false;
            }
        }
        if (lsSupport) { // Native support
            clearEmptyStorage();
        } else { // Use Cookie
            clearEmptyCookie();
        }
    }

    /**
     * Simple localStorage with Cookie Fallback
     * v.1.0.0
     *
     * USAGE:
     * ----------------------------------------
     * Set New / Modify:
     *   store('my_key', 'some_value');
     *
     * Retrieve:
     *   store('my_key');
     *
     * Delete / Remove:
     *   store('my_key', null);
     */

    function localStore(key, value, storageOnly) {
        storageOnly = storageOnly || false;
        var lsSupport = false,
            data;

        // Check for native support
        if (typeof localStorage !== "undefined") {
            lsSupport = true;
            try {
                localStorage.setItem('testLocal', true);
            } catch (e) {
                lsSupport = false;
            }

        }

        // If value is detected, set new or modify store
        if (typeof value !== "undefined" && value !== null) {
            // Convert object values to JSON
            if (typeof value === 'object') {
                value = JSON.stringify(value);
            }
            // Set the store
            if (lsSupport) { // Native support
                localStorage.setItem(key, value);
            } else if (!storageOnly) { // Use Cookie
                createCookie(key, value, 30);
            }
        }

        // No value supplied, return value
        if (typeof value === "undefined") {
            // Get value
            if (lsSupport) { // Native support
                data = localStorage.getItem(key);
            } else if (!storageOnly) { // Use cookie
                data = readCookie(key);
            }

            // Try to parse JSON...
            try {
                data = JSON.parse(data);
            } catch (e) {
                data = data;
            }

            return data;

        }

        // Null specified, remove store
        if (value === null) {
            if (lsSupport) { // Native support
                localStorage.removeItem(key);
            } else if (!storageOnly) { // Use cookie
                createCookie(key, '', -1);
            }
        }

        /**
         * Creates new cookie or removes cookie with negative expiration
         * @param  key       The key or identifier for the store
         * @param  value     Contents of the store
         * @param  exp       Expiration - creation defaults to 30 days
         */

        function createCookie(key, value, exp) {
            var date = new Date();
            date.setTime(date.getTime() + (exp * 24 * 60 * 60 * 1000));
            var expires = "; expires=" + date.toGMTString();
            document.cookie = key + "=" + value + expires + "; path=/";
        }

        /**
         * Returns contents of cookie
         * @param  key       The key or identifier for the store
         */

        function readCookie(key) {
            var nameEQ = key + "=";
            var ca = document.cookie.split(';');
            for (var i = 0, max = ca.length; i < max; i++) {
                var c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }
    };

    /**
     * 应用隔离的存储器，原来的store重命名为localStore <br/>
     * 应用的数据以app_id为键的json存储如app_id123:{key1:value1,key2:value2}
     * @param key
     * @param value
     * @returns
     */
    function store(key, value) {
        if (typeof key_prefix !== 'string') {
            return;
        }

        if (typeof key !== 'string' || key.trim().length === 0) {
            return;
        }

        //根据appId取出该app的数据
        var storeKey = key_prefix + "_" + key;

        if (isUndefined(value)) {//取数据
            var storeData = localStore(storeKey);
            return storeData ? storeData : null;
        } else {//存数据
            localStore(storeKey, value);
        }
    };

    /**
     * 判断obj是否为undefined
     * @param obj
     * @returns {boolean}
     */
    function isUndefined(obj) {
        return obj === void 0;
    }


    function readCookieByName(key) {
        var nameEQ = key + "=";
        var ca = document.cookie.split(';');
        for (var i = 0, max = ca.length; i < max; i++) {
            var c = ca[i];
            while (c.charAt(0) === ' ') c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
        }
        return null;
    }

    /**
     * 获取url参数信息
     * @param name
     * @returns {null}
     */
    function getQueryString(name) {
        var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i');
        var r = window.location.search.substr(1).match(reg);
        if (r != null) {
            return unescape(r[2]);
        }
        return null;

    }

    /**
     * 获取浏览器名称及版本号
     * @returns {{appname: string, version: number}} 返回浏览器名称和版本号信息
     */
    function getBrowserInfo() {
        var browser = {appname: 'unknown', version: 0},
            userAgent = window.navigator.userAgent.toLowerCase();
        //IE,firefox,opera,chrome,netscape
        if (/(msie|firefox|opera|chrome|netscape)\D+(\d[\d.]*)/.test(userAgent)) {
            browser.appname = RegExp.$1;
            browser.version = RegExp.$2;
        } else if (/version\D+(\d[\d.]*).*safari/.test(userAgent)) { // safari
            browser.appname = 'safari';
            browser.version = RegExp.$2;
        }
        return browser;
    }

    /**
     *获取操作系统
     * @param userAgent
     * @returns {*}
     */
    function getOS(userAgent) {
        userAgent = userAgent || navigator.userAgent;

        if (/(Windows NT 10.0|Windows 10)/i.test(userAgent)) {
            return 'windows 10'
        } else if (/(Windows NT 6.3|Windows 8.1)/i.test(userAgent)) {
            return 'windows 8.1'
        } else if (/(Windows NT 6.2|Windows 8)/i.test(userAgent)) {
            return 'windows 8'
        } else if (/(Windows NT 6.1|Windows 7)/i.test(userAgent)) {
            return 'windows 7'
        } else if (/Windows NT 6.0/i.test(userAgent)) {
            return 'windows vista'
        } else if (/Windows NT 5.2/i.test(userAgent)) {
            return 'windows 2003'
        } else if (/Windows NT 5.1/i.test(userAgent)) {
            return 'windows xp'
        } else if (/Windows NT 5.0/i.test(userAgent)) {
            return 'windows 2000';
        }

        if (/(iPhone|iPad|iPod|iOS)/i.test(userAgent)) {
            return 'ios';
        }

        if (/android/i.test(userAgent)) {
            return 'android';
        }

        if (/linux/i.test(userAgent)) {
            return 'linux';
        }

        if (/(macintosh|mac os x)/i.test(userAgent)) {
            return 'mac os'
        }
        return '';
    }

    /**
     * 获取操作系统版本
     * @param userAgent
     * @returns {*}
     */
    function getOSVersion(userAgent) {
        userAgent = userAgent || navigator.userAgent;

        var os = getOS(userAgent);
        if (os === 'android') {
            if (/android\s+(\d+(.\d+)*)/i.test(userAgent)) {
                return RegExp.$1;
            }
        } else if (os === 'ios') {
            if (/cpu\s+(?:iphone\s+)?os\s+(\d+(_\d+)*)/i.test(userAgent)) {
                return RegExp.$1.replace(/_/g, ".");
            }
        }
        return '';
    }

    /**
     * 获取手机机型（仅限于android）
     * @param userAgent
     * @returns {*}
     */
    function getModel(userAgent) {
        userAgent = userAgent || navigator.userAgent;

        var os = getOS(userAgent);
        if (os === 'android') {
            if (/android\s+\d+(?:.\d+)*;\s+(.+)\s+build/i.test(userAgent)) {
                return RegExp.$1;
            }
        }
        return '';
    }
}

window.SfGather = new Gather(window.SfGather);